parameters:
  - name: serviceConnection
    type: string
  - name: sharedEnvironmentId
    type: string
jobs:
- job: DeploySQLDatabase
  pool:
    name: 'Azure Pipelines'
    vmImage: 'windows-2022'
  dependsOn:
    - DeployInfrastructure 

  variables:
    SharedResourceGroup: $[stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.SharedVariables.SharedResourceGroup']]
    SharedSQLServerName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.sharedSQLServerName'] ]
    DatabaseName: $[ dependencies.DeployInfrastructure.outputs['armOutputs.armOutput.sqlDatabaseName'] ]
    IntTestDatabaseName: $[ dependencies.DeployInfrastructure.outputs['armOutputs.armOutput.IntTestSQLDatabaseName'] ]

  steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'sqldrop'
        downloadPath: '$(System.ArtifactsDirectory)'
   
    - task: SqlAzureDacpacDeployment@1
      displayName: 'Azure SQL Publish'
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        ServerName: '$(SharedSQLServerName).database.windows.net'
        DatabaseName: '$(DatabaseName)'
        SqlUsername: '$(SQLServerAdminUsername)'
        SqlPassword: '$(SQLServerAdminPassword)'
        DacpacFile: '$(System.ArtifactsDirectory)/sqldrop/src/Sfa.Tl.ResultsAndCertification.Database/bin/Release/Sfa.Tl.ResultsAndCertification.Database.dacpac'
        AdditionalArguments: '/p:GenerateSmartDefaults=True /v:environment=$(sqlPublishEnvironmentName)'

    - task: AzurePowerShell@5
      displayName: create ResacSQLServiceAccount User 
      inputs:
        azurePowerShellVersion: LatestVersion
        azureSubscription: ${{ parameters.serviceConnection }}
        ScriptType: InlineScript
        Inline: |
          $ip = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
          try {
            Write-Host "Adding $ip to FW Rules for $(SharedSQLServerName) in RG $(sharedResourceGroup)"
            New-AzSqlServerFirewallRule -ResourceGroupName $(sharedResourceGroup) -ServerName $(SharedSQLServerName) -FirewallRuleName "BuildServer-$ip" -StartIpAddress $ip -EndIpAddress $ip
            
            Write-Host "Creating user $(ResacSQLServiceAccountUsername) on '$(DatabaseName)'"
            $sql = "IF NOT EXISTS (SELECT [name] FROM [sys].[database_principals] WHERE [type] = N'S' AND [name] = N'$(ResacSQLServiceAccountUsername)') 
                    BEGIN
                        CREATE USER [$(ResacSQLServiceAccountUsername)] WITH PASSWORD=N'$(ResacSQLServiceAccountPassword)', DEFAULT_SCHEMA=[dbo]
                        EXEC sp_addrolemember @rolename = N'db_datareader', @membername = N'$(ResacSQLServiceAccountUsername)'
                        EXEC sp_addrolemember @rolename = N'db_datawriter', @membername = N'$(ResacSQLServiceAccountUsername)'
                    END"
            Invoke-SqlCmd `
                -ServerInstance '$(SharedSQLServerName).database.windows.net' `
                -Database '$(DatabaseName)' `
                -UserName '$(SQLServerAdminUsername)'
                -Password '$(SQLServerAdminPassword)' `
                -Query     $sql

            if ('$(Environment)' -ne 'Prod') {
              Write-Host "Creating user $(ResacSQLServiceAccountUsername) on $(IntTestDatabaseName)"
              $sql = "IF NOT EXISTS (SELECT [name] FROM [sys].[database_principals] WHERE [type] = N'S' AND [name] = N'$(ResacSQLServiceAccountUsername)') 
                      BEGIN
                          CREATE USER [$(ResacSQLServiceAccountUsername)] WITH PASSWORD=N'$(ResacSQLServiceAccountPassword)', DEFAULT_SCHEMA=[dbo]
                          EXEC sp_addrolemember @rolename = N'db_owner', @membername = N'$(ResacSQLServiceAccountUsername)'
                      END"
              Invoke-SqlCmd `
                -ServerInstance '$(SharedSQLServerName).database.windows.net' `
                -Database '$(IntTestDatabaseName)' `
                -UserName '$(SQLServerAdminUsername)'
                -Password '$(SQLServerAdminPassword)' `
                -Query     $sql
            }
            Write-Host "Creating user"
          }
          finally {
            Write-Host "Removing $ip from FW Rules for $(SharedSQLServerName) in RG $(sharedResourceGroup)"
            Remove-AzSqlServerFirewallRule -ResourceGroupName $(sharedResourceGroup) -ServerName $(SharedSQLServerName) -FirewallRuleName "BuildServer-$ip" -Force
          }

    - pwsh: | 
        $SqlConnectionString = "Server=tcp:$(SharedSQLServerName).database.windows.net,1433;Database=$(DatabaseName);User ID=$(ResacSQLServiceAccountUsername);Password=$(ResacSQLServiceAccountPassword);Trusted_Connection=False;Pooling=True;Connect Timeout=30;MultipleActiveResultSets=True"
        Write-Host "##vso[task.setvariable variable=SqlConnectionString;isOutput=true]$SqlConnectionString"        
      name: SqlVariables

    - pwsh: | 
        $IntTestSqlConnectionString = "Server=tcp:$(SharedSQLServerName).database.windows.net,1433;Database=$(IntTestDatabaseName);User ID=$(ResacSQLServiceAccountUsername);Password=$(ResacSQLServiceAccountPassword);Trusted_Connection=False;Pooling=True;Connect Timeout=30;MultipleActiveResultSets=True"
        Write-Host "##vso[task.setvariable variable=IntTestSqlConnectionString;isOutput=true]$IntTestSqlConnectionString"        
      name: IntTestSqlVariables