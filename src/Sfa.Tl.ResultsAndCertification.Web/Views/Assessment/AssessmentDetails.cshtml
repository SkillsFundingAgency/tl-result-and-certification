@model Sfa.Tl.ResultsAndCertification.Web.ViewModel.Assessment.Manual.AssessmentDetailsViewModel
@using Sfa.Tl.ResultsAndCertification.Web.Content.Assessment
@using Sfa.Tl.ResultsAndCertification.Common.Helpers

@{
    ViewData["Title"] = @AssessmentDetails.Page_Title;
}

@section NavigationBar {
    <vc:breadcrumb model=@Model.Breadcrumb></vc:breadcrumb>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-three-quarters assessment-details">

        <h1 class="govuk-heading-l">@AssessmentDetails.Learners_Assessment_Entries_Heading_Text</h1>
        <h2 class="govuk-heading-m govuk-!-margin-top-7">@AssessmentDetails.Learner_Details</h2>

        <dl class="govuk-summary-list govuk-summary-list--no-border govuk-!-margin-bottom-9" aria-label="@AssessmentDetails.Learners_Details_Aria_Label">
            <vc:summary-item model=Model.SummaryLearnerName></vc:summary-item>
            <vc:summary-item model=Model.SummaryUln></vc:summary-item>
            <vc:summary-item model=Model.SummaryDateofBirth></vc:summary-item>
            <vc:summary-item model=Model.SummaryProvider></vc:summary-item>
            <vc:summary-item model=Model.SummaryTlevelTitle></vc:summary-item>
        </dl>

        <section id="add-entries">
            <h2 class="govuk-heading-m">@string.Format(AssessmentDetails.Core_Heading_Text, Model.PathwayDisplayName)</h2>

            @if (Model.IsCoreEntryEligible == false)
            {
                <p class="govuk-body govuk-!-margin-bottom-9">
                    @string.Format(AssessmentDetails.You_Cannot_Register_Learner_For_Core_Assessment_Until, Model.NextAvailableCoreSeries?.ToLowerInvariant())
                </p>
            }
            else
            {
                @if (Model.NeedCoreResultForPreviousAssessmentEntry)
                {
                    <p class="govuk-body govuk-!-margin-bottom-9">
                        @AssessmentDetails.You_Must <a class="govuk-link" asp-route="@RouteConstants.ResultDetails" asp-route-profileId="@Model.ProfileId">@AssessmentDetails.Add_Result_To_Learners_Previous_Assessment</a> @AssessmentDetails.Before_Entering_New_Assessment_Details
                    </p>
                }
                else if (Model.HasCoreCurrentAssessmentEntry)
                {
                    // TODO: Display current assessment entry details
                }
                else
                {
                    <p class="govuk-body">
                        @string.Format(AssessmentDetails.No_Assessment_Entries_Have_Been_Recored_For, Model.NextAvailableCoreSeries?.ToLowerInvariant())
                    </p>
                    <p class="govuk-body govuk-!-margin-bottom-9">
                        <a class="govuk-link" asp-route="@RouteConstants.AddCoreAssessmentEntry" asp-route-profileId="@Model.ProfileId">@string.Format(AssessmentDetails.Add_An_Assessment_Entry_For, Model.PathwayDisplayName)</a>
                    </p>
                }
            }


            @if (string.IsNullOrWhiteSpace(Model.SpecialismDisplayName))
            {
                <h2 class="govuk-heading-m">@AssessmentDetails.Occupational_Specialism_Heading</h2>
                <p class="govuk-body">
                    @AssessmentDetails.This_Learner_Does_Not_Have_Occuational_Specialisms_Recorded
                </p>

                <p class="govuk-body govuk-!-margin-bottom-9">
                    <a class="govuk-link" asp-route="@RouteConstants.RegistrationDetails" asp-route-profileId="@Model.ProfileId">@AssessmentDetails.Link_Add_An_Occupational_Specialism</a>
                </p>
            }
            else
            {
                <h2 class="govuk-heading-m">@string.Format(AssessmentDetails.Specialism_Heading_Text, Model.SpecialismDisplayName)</h2>

                @if (Model.IsSpecialismEntryEligible == false)
                {
                    <p class="govuk-body govuk-!-margin-bottom-9">
                        @string.Format(AssessmentDetails.You_Cannot_Register_Learner_For_Occupational_Specialism_Until, Model.NextAvailableSpecialismSeries?.ToLowerInvariant())
                    </p>
                }
                else if (Model.IsSpecialismEntryEligible)
                {
                    <p class="govuk-body">
                        @string.Format(AssessmentDetails.No_Assessment_Entries_Have_Been_Recored_For, Model.NextAvailableSpecialismSeries?.ToLowerInvariant())
                    </p>
                    <p class="govuk-body govuk-!-margin-bottom-9">
                        <a class="govuk-link" href="add-entry-core.html">@string.Format(AssessmentDetails.Add_An_Assessment_Entry_For, Model.SpecialismDisplayName)</a>
                    </p>
                }
            }
        </section>
        <a id="searchAgainButton" class="govuk-button" role="button" asp-route="@RouteConstants.SearchAssessments">@AssessmentDetails.Search_Again_Text</a>
    </div>
</div>