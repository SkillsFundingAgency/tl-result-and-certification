parameters:
  - name: serviceConnection
    type: string
  - name: sharedEnvironmentId
    type: string
  - name: dependencies
    type: object
  - name: package
    type: string
jobs:
- job: PublishFunction
  variables:
    functionAppName: $[ dependencies.DeployInfrastructure.outputs['armOutputs.armOutput.functionAppName'] ]

  pool:
    name: 'Azure Pipelines'
    vmImage: 'windows-2022'
  dependsOn:
    - "${{ each dependency in parameters.dependencies }}":
        - "${{dependency}}"  
  steps:
  - checkout: self
  - checkout: devopsTools
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'appdrop'
      downloadPath: '$(System.ArtifactsDirectory)'
  
  - task: AzureFunctionApp@1
    displayName: 'Deploy Function App: $(FunctionAppName)'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      appType: 'functionApp'
      appName: '$(functionAppName)'
      DeployToSlotOrASE: true
      ResourceGroupName: '$(ResourceGroupName)'
      SlotName: 'staging'
      package: '$(System.ArtifactsDirectory)/appdrop/${{ parameters.package }}'
      deploymentMethod: 'auto'

  - task: AzureAppServiceManage@0
    displayName: 'Start Staging Slot: $(FunctionAppName)'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      Action: 'Start Azure App Service'
      WebAppName: '$(FunctionAppName)'
      SpecifySlotOrASE: true
      ResourceGroupName: '$(ResourceGroupName)'
      Slot: 'staging'

  - task: AzureCLI@2
    displayName: 'Pre-Swap slot check'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'pscore'
      scriptLocation: scriptPath
      scriptPath: ./operations-devops-tools/Powershell/FunctionAppDeployment/preSwapSlotCheck.ps1
      scriptArguments: '-FunctionAppName $(FunctionAppName) -ResourceGroupName $(ResourceGroupName) -SlotName "staging"'
      failOnStandardError: true
  
  - task: AzureAppServiceManage@0
    displayName: 'Swap Slots: $(FunctionAppName)'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      WebAppName: '$(FunctionAppName)'
      ResourceGroupName: '$(ResourceGroupName)'
      SourceSlot: 'staging'   
    condition: and(succeeded(), eq(variables['CompleteSwap'], 'true')) 

  - task: AzureAppServiceManage@0
    displayName: 'Stop Staging Slot: $(FunctionAppName)'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      Action: 'Stop Azure App Service'
      WebAppName: '$(FunctionAppName)'
      SpecifySlotOrASE: true
      ResourceGroupName: '$(ResourceGroupName)'
      Slot: 'staging'